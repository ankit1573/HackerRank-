#include <bits/stdc++.h>

using namespace std;
// A code that does not work is as good as code not written

bool isAnagram(string p, string q){
    int a[26] = {0};
    int b[26] = {0};
    for (int i = 0;i<p.size();i++) {
        a[p[i] - 'a']++;
    }
    for (int j = 0;j<q.size();j++) {
        b[q[j] - 'a']++;
    }
    for(int i = 0;i <26;i++) {
        if(a[i] != b[i]){
            return false;
        }
    }
    return true;
}


int sherlockAndAnagrams(string s) {
// i hope that the brute force solution works for this problem
// so first we consider all substrings of same length
// and then we check if they are anagrams
    int n = s.size();
    int count = 0;
    for (int len = 1;len <n;len++) {
        for(int i = 0; i + len-1 < n;i++) {
            string p = s.substr(i, len);
            for(int j  = i+1;j+ len-1<n;j++) {
                string q = s.substr(j, len);
                if (isAnagram(p,q)) {
                    count++;
                }
            }
            
        }
    }
    return count;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = sherlockAndAnagrams(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
